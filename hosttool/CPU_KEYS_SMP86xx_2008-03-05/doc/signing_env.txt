I. xsdk_env.bash
-----------------

  xsdk_env.bash is a script that setup some variables, that is included in
  scripts generating signatures, xloads and xrpc binaries. Some of those
  scripts are described in section II below.
  
  
Inputs:

 The following variables are used by xsdk_env.bash and have to be defined
 prior to sourcing xsdk_env.bash if needed. There is no default values
 defined by xsdk_env.bash. These values are defined by the scripts using
 xsdk_env.bash, based on user input.

 - CERTID : The ID of the certificate to use. 

 - REV : The revision/bonding option of the chip to use
        Possible revisions are:
        - 8634_ES4_dev  : for SMP8634 ES4 to ES9 chips.
        - 8634_ES4_prod : for SMP8634 revA to revC chips.
	- 8644_ES1_dev  : for SMP8644 and SMP8654 ES1 chips
	- 8644_ES1_prod : for SMP8644 and SMP8654 revA chips
        For backward compatibility purposes, ES4_dev is an alternate for
	8634_ES4_dev and ES4_prod is an alternate for 8634_ES4_prod.
        
 - VERSION : version string (used for xos, xtask, ucodes etc...)
 
 - XTASK : xtask subdirectory and name.
 
 - TOKEN : token name (one of bind, unbind, unload)

 - XSDK_ROOT : Root directory for the default location of keys, certificates, 
   signed items, signatures and xloads. If undefined, the script will exit.
   This should be manually defined by the users.

Customizations:

 The following variable defines the directory where the different items are located. If not
 set a default is used.
 
 - XSDK_CERT : Directory where certificate is stored. If undefined,
   default value is ${XSDK_ROOT}/items/xload_certificates
   
 - XSDK_CERT_SIG : Directory where the certificate signature is stored. If
   undefined, default value is ${XSDK_ROOT}/signatures/xload_certificates
   
 - XSDK_PUBLIC_KEYS : Directory where the RSA public key included in the
   certificate, as well as the XOS RSA public keys are stored.
   Default value is ${XSDK_ROOT}/public_keys
   
 - XSDK_SEKAES : Directory where the privates SEK AES keys are stored.
   Default value is ${XSDK_ROOT}/dummy_private_keys/sekaes/
   
 - XSDK_PRIVATE_KEYS : Directory where the private RSA keys are stored.
   Default value is ${XSDK_ROOT}/dummy_private_keys/

 - XSDK_OPENSSL: Define which OPENSSL program to use.
   Default value is "openssl"

 - XSDK_PRIVATE_OPENSSL : Define which OPENSSL program to use to
   handle openssl operations involving RSA private keys. This is required
   in case private keys are protected by a Hardware Security Module that
   requires a different version of openssl.
   Default values is ${XSDK_OPENSSL}

 - XSDK_SUDO : Prefix to commands that need write access to the XSDK_ROOT repository.
   Typically this would be something like XSDK_SUDO="sudo -u xsdk_root_owner". This is
   not necessary if the XSDK_ROOT repository is writable by the user running the script.
   Default value is empty.


Items names and location: 
  
  Those variable are defined by xsdk_env.bash, based on the inputs or default.
  The script using xsdk_env.bash expect the items to be in the locations
  defined here.
  
  # public keys
  Sigma serial flash root public key (commonly call Sigma's root key):
    SIGMA_SFLA_PUBLIC_KEY=${XSDK_PUBLIC_KEYS}/${REV}_ser_pubkey.pem
  Sigma parralel flash root public key:
    SIGMA_PFLA_PUBLIC_KEY=${XSDK_PUBLIC_KEYS}/${REV}_par_pubkey.pem

  # certificates
  Certificate, delivered by Sigma:
    CERT_BIN=${XSDK_CERT}/xload_certificate_${REV}_${CERTID}.bin
  Certificate signature, delivered by Sigma:
    CERT_SIG=${XSDK_CERT_SIG}/xload_certificate_${REV}_${CERTID}.bin.${REV}_ser.bin
  Certificate public key of the certificate holder:
    CERT_PUBLIC_KEY=${XSDK_PUBLIC_KEYS}/${REV}_${CERTID}_pubkey.pem
  Certificate private key, only known to the certificate holder. Sigma also
  provide the private keys for the facsimile certificates:
    CERT_PRIVATE_KEY=${XSDK_PRIVATE_KEYS}/${REV}_${CERTID}_keyboth.pem

  # xosu files:
  Sigma provide xos update binary in the xosu format.
  Basename of the xosu binary:
    XOSU=xosu-xos${VERSION}-${REV}
  xos update binary (provided by Sigma):
    XOSU_BIN=${XSDK_ITEMS}/xosu/${XOSU}.bin
  xos update signature, and xload (generated by certificate holder):
    XOSU_SIG=${XSDK_SIGS}/xosu/${XOSU}.bin.${REV}_${CERTID}.bin
    XOSU_XLOAD=${XSDK_XLOADS}/xosu/${XOSU}_${CERTID}.xload

  # xtokens files:
  Signed tokens are used to enable xtask unload (xunload) and certificate
  binding operation (xbind). The token binaries 16 bytes long predefined
  payloads.

  Token binary (predefined):
    TOKEN_BIN=${XSDK_ITEMS}/tokens/${TOKEN}.bin
  Token signature, and xload (by Certificate holder)
    TOKEN_SIG=${XSDK_SIGS}/tokens/${TOKEN}.bin.${REV}_${CERTID}.bin
    TOKEN_XLOAD=${XSDK_XLOADS}/tokens/${TOKEN}_${REV}_${CERTID}.xload

  # irq handler files:
  irq_handler binary (provided by Sigma):
    IH_BIN=${XSDK_ITEMS}/ih/${IH}.bin
  irq_handler signature, and xload (generated by certificate holder):
    IH_SIG=${XSDK_SIGS}/ih/${IH}.bin.${REV}_${CERTID}.bin
    IH_XLOAD=${XSDK_XLOADS}/ih/${IH}_${REV}_${CERTID}.xload

  # ucodes files:
  Microcode binaryi, signature and xload:
    UCODE_BIN=${XSDK_ITEMS}/ucodes/${UCODE}.bin
    UCODE_SIG=${XSDK_SIGS}/ucodes/${UCODE}.bin.${REV}_${CERTID}.bin
    UCODE_XLOAD=${XSDK_XLOADS}/ucodes/${UCODE}_${REV}_${CERTID}.xload

  # xtasks files:
  xtask binary, singature and xload:
    XTASK_BIN=${XSDK_ITEMS}/xtasks/${XTASK}/${XTASK}-${VERSION}.bin
    XTASK_SIG=${XSDK_SIGS}/xtasks/${XTASK}/${XTASK}-${VERSION}.bin.${REV}_${CERTID}.bin
    XTASK_XLOAD=${XSDK_XLOADS}/xtasks/${XTASK}/${XTASK}-${VERSION}_${REV}_${CERTID}.xload

  # zboot files:
  This is for the cpu bootloaders. 
  Bootloader binary, signature and xload:
    ZBOOT_BIN=${XSDK_ITEMS}/zboot/${ZBOOT}.bin
    ZBOOT_SIG=${XSDK_SIGS}/zboot/${ZBOOT}.bin.${REV}_${CERTID}.bin
    ZBOOT_XLOAD=${XSDK_XLOADS}/zboot/${ZBOOT}_${REV}_${CERTID}.xload

  # cpu files:
  This is for cpu binaries such as yamon or kernel:
  Cpu binary, signature and xload:
    CPU_BIN=${XSDK_ITEMS}/zboot/${CPU}.bin
    CPU_SIG=${XSDK_SIGS}/zboot/${CPU}.bin.${REV}_${CERTID}.bin
    CPU_XLOAD=${XSDK_XLOADS}/zboot/${CPU}_${REV}_${CERTID}.xload


II. Scripts using xsdk_env.bash:
--------------------------------

 xsign.bash :
   This script use openssl to generate an rsa signature using
   a specific certificate. It uses the key $CERT_PRIVATE_KEY.

 mkxosu.bash :
   This script generate an xosu payload. The xosu payload is just the
   concatenation of the xos kernel binary and its signature by Sigma's
   root key, padded to the AES block size.
   The script use the following kernel binaries and signature:
	${XSDK_ITEMS}/xos_kernel/signablearea-xos${VERSION}.bin
	${XSDK_SIGS}/xos_kernel/signablearea-xos${VERSION}.bin.${REV}_ser.bin
    
 mkxload.bash :
   This script generate an xload binary. In addition to the certificates and
   keys defined by xsdk_env.bash, it might need the following keys:
         
   - The XOS RSA public keys (delivered by Sigma):
       ${XSDK_PUBLIC_KEYS}/<REV>_sek<F>_pubkey.pem 
     where <F> is the key index (from 0 to 6).
   
   - The XOS AES symmetric keys (Delivered to the Certificate holder by Sigma)
     are stored in a zipped archive named:
       ${XSDK_SEKAES}/<REV>_<H>_sekaes.zip
     The archives contains the binary and text form of the keys, the
     files are named :
       <REV>_<H>_sekaes/<REV>_<H>_sekaes<F>.bin (binary form)
       <REV>_<H>_sekaes/<REV>_<H>_sekaes<F>.txt (text form)
     Where <H> is the SHA-1 hash of the certificate and <F> is the
     key index.
     The files need to be extracted from the archive before use
	
   This script doesnt expect the item to be wrapped to be in any
   particular location.

   mkxload.bash generates a random AES session key using /dev/urandom, so
   the result will be different for each run.

 xloadinfo.bash:
   This script extract and print information from an xload binary.
   If the SEK private key is available, it will be able decrypt the
   session key and the payload.

   In addition to the certificate and keys defined by xsdk_env.bash,
   it might look for the following keys:
   
   - The XOS RSA private keys (These keys are only available to a few Sigma
   employees):
       ${XSDK_PUBLIC_KEYS}/<REV>_sek<F>_pubkey.pem 
     where <F> is the key index (from 0 to 6).
   
   - The XOS AES symmetric keys (Delivered to the Certificate holder by Sigma)
       ${XSDK_SEKAES}/<REV>_<H>_sekaes.zip
     The archives contains the binary and text form of the keys, the
     files are named :
       <REV>_<H>_sekaes/<REV>_<H>_sekaes<F>.bin (binary form)
       <REV>_<H>_sekaes/<REV>_<H>_sekaes<F>.txt (text form)
     Where <H> is the SHA-1 hash of the certificate and <F> is the
     key index.
     The files need to be extracted from the archive before use.

 build_*_xload.bash:
 
   Those scripts are wrappers around mkxload.bash. They generate xloads from
   items in the specific locations defined by xsdk_env.bash. They also check
   if the type of the certificate used is valid.

   (The scripts are build_xosu_xload.bash, build_xtask_xload.bash,
    build_ucode_xload.bash, build_ih_xload.bash, build_zboot_xload.bash,
    build_cpu_xload.bash, build_token_xload.bash)

 build_*_xload_xrpc.bash:

   Wrapper around buildxrpc.bash to generate an XLOAD xrpc using the
   xloads items in the ${XSDK_XLOADS}.

   (The scripts are build_xosu_xload_xrpc.bash, build_xtask_xrpc_xload.bash,
    build_ucode_xrpc_xload.bash, build_ih_xload_xrpc.bash,
    build_zboot_xrpc_xload.bash, build_cpu_xload_xrpc.bash)

 build_xunload_xrpc.bash:
   
   Wrapper around buildxrpc.bash to generate an XUNLOAD xrpc using the
   tokens in ${TOKEN_XLOAD}. (The only valid token is unload)

 build_xbind_xrpc.bash:
   
   Wrapper around buildxrpc.bash to generate an XBIND xrpc using the
   tokens in ${TOKEN_XLOAD}. (The only valid tokens are bind and unbind)




   

   

 

