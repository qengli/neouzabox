diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linux-2.6.15.ref/arch/mips/boot/Makefile linux-2.6.15/arch/mips/boot/Makefile
--- linux-2.6.15.ref/arch/mips/boot/Makefile	2008-02-13 15:27:55.000000000 -0800
+++ linux-2.6.15/arch/mips/boot/Makefile	2008-02-13 15:32:18.000000000 -0800
@@ -42,6 +42,115 @@
 $(obj)/addinitrd: $(obj)/addinitrd.c
 	$(HOSTCC) -o $@ $^
 
+$(obj)/vmlinux.gz: $(obj)/vmlinux.bin
+	gzip -c9 $< > $@
+
+ifeq ($(CONFIG_TANGOX),y)
+$(obj)/vmlinux.zbf: $(obj)/vmlinux.gz 
+	genzbf -l $(loadaddr) -s `$(OBJDUMP) -f $(TOPDIR)/vmlinux | grep start | awk '{ print $$3 }'` -a lzf -o $@ $<
+
+ifdef CONFIG_TANGO2
+$(obj)/xrpc_xload_vmlinux_$(certtype).bin: $(obj)/vmlinux.zbf
+	sh $(TOPDIR)/scripts/build_cpu_xrpc_xload.bash $(obj)/vmlinux $(certid) $(certtype)
+endif
+
+ifdef CONFIG_TANGO3
+$(obj)/vmlinux_$(certtype).xload: $(obj)/vmlinux.zbf
+	sh $(TOPDIR)/scripts/build_cpu_xload.bash $(obj)/vmlinux $(certid) $(certtype)
+endif
+
+ifdef CONFIG_TANGO2
+zbimage-linux-xrpc: $(obj)/zbimage-linux-xrpc
+endif
+
+ifdef CONFIG_TANGO3
+zbimage-linux-xload: $(obj)/zbimage-linux-xload
+
+zbimage-linux-zbf: $(obj)/zbimage-linux-zbf
+endif
+
+ifdef CONFIG_TANGO2
+$(obj)/zbimage-linux-xrpc: $(obj)/xrpc_xload_vmlinux_$(certtype).bin
+endif
+ifdef CONFIG_TANGO3
+$(obj)/zbimage-linux-xload: $(obj)/vmlinux_$(certtype).xload
+endif
+	mkdir romfs
+	cp -f $< romfs
+	genromfs -V MIPS_LINUX_XRPC -d romfs -f $@
+	rm -rf romfs
+
+ifdef CONFIG_TANGO3
+$(obj)/zbimage-linux-zbf: $(obj)/vmlinux.zbf
+	mkdir romfs
+	cp -f $< romfs
+	genromfs -V MIPS_LINUX_ZBF -d romfs -f $@
+	rm -rf romfs
+endif
+
+# The choice of .zbf extension is not really the case, simply make it
+# work with the build_cpu_x* script which assumes the .zbf extension.
+$(obj)/vmlinux_shax.zbf: $(obj)/vmlinux.gz
+ifdef CONFIG_TANGO2
+	@echo "Using sha1 digest .."
+	@tobin.bash `sha1sum -b $< | awk '{ print $$1 }'` > $@
+endif
+ifdef CONFIG_TANGO3
+	@echo "Using sha256 digest .."
+	@tobin.bash `sha256sum -b $< | awk '{ print $$1 }'` > $@
+endif
+
+ifdef CONFIG_TANGO2
+$(obj)/xrpc_xload_vmlinux_shax_$(certtype).bin: $(obj)/vmlinux_shax.zbf
+	sh $(TOPDIR)/scripts/build_cpu_xrpc_xload.bash $(obj)/vmlinux_shax $(certid) $(certtype)
+endif
+
+ifdef CONFIG_TANGO3
+$(obj)/vmlinux_shax_$(certtype).xload: $(obj)/vmlinux_shax.zbf
+	sh $(TOPDIR)/scripts/build_cpu_xload.bash $(obj)/vmlinux_shax $(certid) $(certtype)
+endif
+
+ifdef CONFIG_TANGO2
+$(obj)/vmlinux_enc.bin: $(obj)/xrpc_xload_vmlinux_shax_$(certtype).bin $(obj)/vmlinux.gz
+endif
+ifdef CONFIG_TANGO3
+$(obj)/vmlinux_enc.bin: $(obj)/vmlinux_shax_$(certtype).xload $(obj)/vmlinux.gz
+endif
+	@cat $^ > $@
+
+$(obj)/vmlinux_enc.zbf: $(obj)/vmlinux_enc.bin 
+ifdef CONFIG_TANGO2
+	genzbf -l $(loadaddr) -s $(loadaddr) -e `stat --format=%s $(obj)/xrpc_xload_vmlinux_shax_$(certtype).bin` -a lzef -o $@ $<
+endif
+ifdef CONFIG_TANGO3
+	genzbf -l $(loadaddr) -s `$(OBJDUMP) -f $(TOPDIR)/vmlinux | grep start | awk '{ print $$3 }'` -e `stat --format=%s $(obj)/vmlinux_shax_$(certtype).xload` -a lzef -o $@ $<
+endif
+
+zbimage-linux-enc: $(obj)/zbimage-linux-enc
+
+$(obj)/zbimage-linux-enc: $(obj)/vmlinux_enc.zbf
+	mkdir romfs
+	cp -f $< romfs
+	genromfs -V MIPS_LINUX_ENC -d romfs -f $@
+	rm -rf romfs
+
+$(obj)/vmlinux_encs.zbf: $(obj)/vmlinux_enc.bin 
+ifdef CONFIG_TANGO2
+	genzbf -l $(loadaddr) -s $(loadaddr) -e `stat --format=%s $(obj)/xrpc_xload_vmlinux_shax_$(certtype).bin` -a lzes -o $@ $<
+endif
+ifdef CONFIG_TANGO3
+	genzbf -l $(loadaddr) -s `$(OBJDUMP) -f $(TOPDIR)/vmlinux | grep start | awk '{ print $$3 }'` -e `stat --format=%s $(obj)/vmlinux_shax_$(certtype).xload` -a lzes -o $@ $<
+endif
+
+zbimage-linux-encs: $(obj)/zbimage-linux-encs
+
+$(obj)/zbimage-linux-encs: $(obj)/vmlinux_encs.zbf
+	mkdir romfs
+	cp -f $< romfs
+	genromfs -V MIPS_LINUX_ENC -d romfs -f $@
+	rm -rf romfs
+endif
+
 archhelp:
 	@echo	'* vmlinux.ecoff	- ECOFF boot image'
 	@echo	'* vmlinux.srec		- SREC boot image'
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linux-2.6.15.ref/README.1019.zbf.patch linux-2.6.15/README.1019.zbf.patch
--- linux-2.6.15.ref/README.1019.zbf.patch	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15/README.1019.zbf.patch	2008-02-13 15:32:46.000000000 -0800
@@ -0,0 +1,19 @@
+Feature:
+--------
+ZBF container packaging and binary signing.
+
+Prerequisite patch numbers:
+---------------------------
+0000
+1000
+
+Primary author:
+---------------
+YH Lin
+
+Related to which chip version SMP86xx xx=?
+------------------------------------------
+Tango2 ES6/RevA or above, or Tango3 ES1 or above
+
+(linux patches) which CONFIG_... are provided:
+----------------------------------------------
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linux-2.6.15.ref/scripts/build_cpu_xload.bash linux-2.6.15/scripts/build_cpu_xload.bash
--- linux-2.6.15.ref/scripts/build_cpu_xload.bash	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15/scripts/build_cpu_xload.bash	2008-02-13 15:29:12.000000000 -0800
@@ -0,0 +1,49 @@
+#!/bin/bash
+set -e
+#
+if [ $# != 3 ]; then 
+    cat <<EOF
+
+Syntax: $0 cpupkg 000b 8634_ES4_dev
+
+The cpupkg came with .zbf extension. You have to specify cpu binary xtask to wrap, 
+the certificate id you plan to use, and the chip revision (ES1_dev or ES4_dev) .
+also make sure that the scripts below are accessible and in your PATH variable
+EOF
+    exit -1 
+fi
+#
+if [ -z "$XSDK_ROOT" ]; then 
+	if [ -d /utils/em8xxx/signed_items ]; then
+		# Use default
+		XSDK_ROOT=/utils/em8xxx/signed_items
+	else
+		echo "*** You need to define the XSDK_ROOT variable ***"
+		exit -1
+	fi
+fi
+#
+CPUPKG=$1
+CERTID=$2
+REV=$3
+BNAME=`basename $1`
+DNAME=`dirname $1`
+TMPADDR=0x13000000
+
+CPUPKG_BIN=${DNAME}/${BNAME}.zbf
+CPUPKG_SIG=${DNAME}/${BNAME}.${REV}_${CERTID}.bin
+XLOAD_BIN=${DNAME}/${BNAME}_${REV}.xload
+XRPC_BIN=xrpc_xload_${BNAME}_${REV}.bin
+PRIVATE_KEY=$XSDK_ROOT/dummy_private_keys/${REV}_${CERTID}_keyboth.pem
+
+echo Using $CERT_BIN
+
+# aes128 pad!
+zeropad.bash $CPUPKG_BIN 16
+SIZE=`stat --format=%s $CPUPKG_BIN`
+
+echo CPUPKG Image Map : size=$SIZE
+
+openssl sha1 -sign $PRIVATE_KEY < $CPUPKG_BIN | revbytes.pl > $CPUPKG_SIG
+mkxload.bash $XSDK_ROOT $REV $CERTID $CPUPKG_BIN $CPUPKG_SIG $XLOAD_BIN
+
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linux-2.6.15.ref/scripts/build_cpu_xrpc_xload.bash linux-2.6.15/scripts/build_cpu_xrpc_xload.bash
--- linux-2.6.15.ref/scripts/build_cpu_xrpc_xload.bash	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.15/scripts/build_cpu_xrpc_xload.bash	2008-02-13 15:29:12.000000000 -0800
@@ -0,0 +1,50 @@
+#!/bin/bash
+set -e
+#
+if [ $# != 3 ]; then 
+    cat <<EOF
+
+Syntax: $0 cpupkg 000b 8634_ES4_dev
+
+The cpupkg came with .zbf extension. You have to specify cpu binary xtask to wrap, 
+the certificate id you plan to use, and the chip revision (ES1_dev or ES4_dev) .
+also make sure that the scripts below are accessible and in your PATH variable
+EOF
+    exit -1 
+fi
+#
+if [ -z "$XSDK_ROOT" ]; then 
+	if [ -d /utils/em8xxx/signed_items ]; then
+		# Use default
+		XSDK_ROOT=/utils/em8xxx/signed_items
+	else
+		echo "*** You need to define the XSDK_ROOT variable ***"
+		exit -1
+	fi
+fi
+#
+CPUPKG=$1
+CERTID=$2
+REV=$3
+BNAME=`basename $1`
+DNAME=`dirname $1`
+TMPADDR=0x13000000
+
+CPUPKG_BIN=${DNAME}/${BNAME}.zbf
+CPUPKG_SIG=${DNAME}/${BNAME}.${REV}_${CERTID}.bin
+XLOAD_BIN=${DNAME}/${BNAME}_${REV}.xload
+XRPC_BIN=xrpc_xload_${BNAME}_${REV}.bin
+PRIVATE_KEY=$XSDK_ROOT/dummy_private_keys/${REV}_${CERTID}_keyboth.pem
+
+echo Using $CERT_BIN
+
+# aes128 pad!
+zeropad.bash $CPUPKG_BIN 16
+SIZE=`stat --format=%s $CPUPKG_BIN`
+
+echo CPUPKG Image Map : size=$SIZE
+
+openssl sha1 -sign $PRIVATE_KEY < $CPUPKG_BIN | revbytes.pl > $CPUPKG_SIG
+mkxload.bash $XSDK_ROOT $REV $CERTID $CPUPKG_BIN $CPUPKG_SIG $XLOAD_BIN
+buildxrpc.bash XRPC_CALLERID_IGNORED XRPC_ID_XLOAD $SIZE $TMPADDR 2 3 4 $XLOAD_BIN ${DNAME}/$XRPC_BIN
+
