diff -Naur udev-070.orig/udev_rules.c udev-070/udev_rules.c
--- udev-070.orig/udev_rules.c	2005-09-15 02:19:07.000000000 +0300
+++ udev-070/udev_rules.c	2005-09-28 13:45:09.000000000 +0300
@@ -288,12 +288,11 @@
 
 /* finds the lowest positive device number such that <name>N isn't present in the udevdb
  * if <name> doesn't exist, 0 is returned, N otherwise */
-static int find_free_number(const char *base, const char *devpath)
+static int find_free_number(const char *base, const char *devpath, int num)
 {
 	char db_devpath[PATH_SIZE];
 	char filename[PATH_SIZE];
 	struct udevice udev_db;
-	int num = 0;
 
 	/* check if the device already owns a matching name */
 	udev_init_device(&udev_db, NULL, NULL, NULL);
@@ -318,7 +317,10 @@
 	}
 
 	/* just search the database again and again until a free name is found */
-	strlcpy(filename, base, sizeof(filename));
+	if (num)
+		snprintf(filename, sizeof(filename), "%s%d", base, num);
+	else
+		strlcpy(filename, base, sizeof(filename));
 	while (1) {
 		dbg("look for existing node '%s'", filename);
 		if (udev_db_lookup_name(filename, db_devpath, sizeof(db_devpath)) != 0) {
@@ -420,6 +422,7 @@
 		SUBST_RESULT,
 		SUBST_SYSFS,
 		SUBST_ENUM,
+		SUBST_ENUM_ONE,
 		SUBST_PARENT,
 		SUBST_TEMP_NODE,
 		SUBST_ROOT,
@@ -440,6 +443,7 @@
 		{ .name = "result",		.fmt = 'c',	.type = SUBST_RESULT },
 		{ .name = "sysfs",		.fmt = 's',	.type = SUBST_SYSFS },
 		{ .name = "enum",		.fmt = 'e',	.type = SUBST_ENUM },
+		{ .name = "enum1",		.fmt = 'E',	.type = SUBST_ENUM_ONE },
 		{ .name = "parent",		.fmt = 'P',	.type = SUBST_PARENT },
 		{ .name = "tempnode",		.fmt = 'N',	.type = SUBST_TEMP_NODE },
 		{ .name = "root",		.fmt = 'r',	.type = SUBST_ROOT },
@@ -596,12 +600,17 @@
 			dbg("substitute sysfs value '%s'", temp2);
 			break;
 		case SUBST_ENUM:
-			next_free_number = find_free_number(string, udev->devpath);
+			next_free_number = find_free_number(string, udev->devpath, 0);
 			if (next_free_number > 0) {
 				sprintf(temp2, "%d", next_free_number);
 				strlcat(string, temp2, maxsize);
 			}
 			break;
+		case SUBST_ENUM_ONE:
+			next_free_number = find_free_number(string, udev->devpath, 1);
+			sprintf(temp2, "%d", next_free_number);
+			strlcat(string, temp2, maxsize);
+			break;
 		case SUBST_PARENT:
 			if (!class_dev)
 				break;
